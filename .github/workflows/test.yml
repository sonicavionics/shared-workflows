name: Export KiCad Images

on:
  workflow_call:
    secrets:
      APP_ID:
        required: true
      APP_PRIVATE_KEY:
        required: true

jobs:
  job:
    # You need write access to push changes
    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
      # 1) Retrieve the GitHub App token
      - id: create_app_token
        uses: tibdex/github-app-token@v2.1.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      # 2) Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # 3) Set up Docker Buildx (allows building in Docker context if needed)
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # 4) Pull the KiCad Docker image
      - name: Pull KiCad Docker image
        run: |
          echo "Pulling KiCad Docker image..."
          docker pull kicad/kicad:nightly-full

      # 5) Set directory permissions to 777 (often needed for container writes)
      - name: Set directory permissions
        run: |
          echo "Setting directory permissions to 777..."
          sudo chmod -R 777 .

      # 6) Export schematic, PCB, and 3D model via KiCad CLI
      - name: Export schematic, PCB, and 3D model
        run: |
          echo "Exporting schematic, PCB, and 3D model..."
          docker run --rm -v "${{ github.workspace }}:/workspace" -w /workspace kicad/kicad:nightly-full bash -c "
            export KICAD8_3DMODEL_DIR=/usr/share/kicad/3dmodels/

            # Create a local images folder if it doesn't exist
            mkdir -p images

            # Export schematic as an SVG
            kicad-cli sch export svg -o 'images/sch' kicad/*.kicad_sch
            mv images/sch/*.svg images/sch.svg
            rm -r images/sch

            # Export front side PCB as an SVG
            kicad-cli pcb export svg -o 'images/pcbf.svg' \
              --page-size-mode 2 \
              --exclude-drawing-sheet \
              --layers 'F.Cu,F.SilkS,F.Mask,Edge.Cuts' \
              kicad/*.kicad_pcb

            # Export back side PCB as an SVG
            kicad-cli pcb export svg -o 'images/pcbb.svg' \
              --page-size-mode 2 \
              -m \
              --exclude-drawing-sheet \
              --layers 'B.Cu,B.SilkS,B.Mask,Edge.Cuts' \
              kicad/*.kicad_pcb

            # Export PCB as a STEP file
            kicad-cli pcb export step --output 'images/board.step' kicad/*.kicad_pcb
          "

      # 7) Export VRML + render 3D images with Rayhunter
      - name: Export and process 3D VRML
        run: |
          echo "Exporting 3D VRML and rendering PNG images..."
          docker run --rm -v "$(pwd):/workspace" kicad/kicad:nightly-full bash -c '
            set -e
            export KICAD8_3DMODEL_DIR=/usr/share/kicad/3dmodels/
            
            cd /workspace
            mkdir -p images

            # Export VRML from the PCB
            kicad-cli pcb export vrml --output "images/board.wrl" kicad/*.kicad_pcb

            # Install Rayhunter + dependencies
            echo "Installing Rayhunter..."
            mkdir -p ~/Downloads
            cd ~/Downloads
            sudo apt-get update
            sudo apt-get install -y wget libpng-dev
            wget https://master.dl.sourceforge.net/project/castle-engine/rayhunter/rayhunter-1.3.4-linux-x86_64.tar.gz
            tar xzvf rayhunter-1.3.4-linux-x86_64.tar.gz
            sudo install -m 0755 ~/Downloads/rayhunter/rayhunter /usr/local/bin/rayhunter

            # Add lighting for FRONT side
            cd /workspace/images
            head -1 "board.wrl" > "board.front.wrl"
            cat <<EOF >> "board.front.wrl"
          Transform {
              children [
                DirectionalLight {
                    on TRUE
                    intensity 0.63
                    ambientIntensity 0.21
                    color 1.0 1.0 1.0
                    direction 0.1 -0.1 -1
                }
          EOF
            cat "board.wrl" >> "board.front.wrl"
            echo "] }" >> "board.front.wrl"

            # Render FRONT PNG
            echo "Converting board.front.wrl to board.front.png..."
            rayhunter classic 7 \
                4320 4320 \
                "/workspace/images/board.front.wrl" \
                "/workspace/images/board.front.png" \
                --camera-pos 0 0 6 \
                --camera-dir 0 0 -1 \
                --scene-bg-color 0 0 1 \
                --ortho -2 -2 2 2

            # Add lighting for BACK side
            cd /workspace/images
            head -1 "board.wrl" > "board.back.wrl"
            cat <<EOF >> "board.back.wrl"
          Transform {
              children [
                DirectionalLight {
                    on TRUE
                    intensity 0.8
                    ambientIntensity 0.3
                    color 1.0 1.0 1.0
                    direction 0.0 0.0 1.0
                }
          EOF
            cat "board.wrl" >> "board.back.wrl"
            echo "] }" >> "board.back.wrl"

            # Render BACK PNG
            echo "Converting board.back.wrl to board.back.png..."
            rayhunter classic 7 \
                4320 4320 \
                "board.back.wrl" \
                "board.back.png" \
                --camera-pos 0 0 -6 \
                --camera-dir 0 0 1 \
                --scene-bg-color 0 0 1 \
                --ortho -2 -2 2 2

            # Install additional tools (Inkscape, ImageMagick) to modify exports
            sudo apt-get install -y sed inkscape imagemagick

            # Crop front/back images and make blue background transparent
            convert /workspace/images/board.front.png -trim -transparent blue /workspace/images/board.front.png
            convert /workspace/images/board.back.png -trim -transparent blue /workspace/images/board.back.png

            # Remove 'fill="white"' from PCB front/back .svg
            sed -i "s/fill=\"white\"/fill=\"none\"/g" /workspace/images/pcbf.svg
            sed -i "s/fill=\"white\"/fill=\"none\"/g" /workspace/images/pcbb.svg

            # Use Inkscape to crop the final SVGs to the actual drawing
            cd /workspace/images
            inkscape --export-area-drawing --export-filename=pcbf.svg pcbf.svg
            inkscape --export-area-drawing --export-filename=pcbb.svg pcbb.svg

            echo "3D rendering and SVG processing completed."
          '

      # 8) Configure Git user/email
      - name: Configure Git
        run: |
          echo "Configuring Git user and email..."
          git config user.name "KiCad Export App"
          git config user.email "123456+MyKiCadApp[bot]@users.noreply.github.com"

      # 9) Commit and push changes to the main branch using the GitHub App token
      - name: Commit and push changes
        run: |
          # Add both test.txt and images/ directory to the commit
          git add images/

          # Commit with a descriptive message
          git commit -m "Export KiCad images" || echo "No changes to commit."

          # Rewrite the remote origin to use the GitHub App token
          git remote set-url origin "https://x-access-token:${{ steps.create_app_token.outputs.token }}@github.com/${{ github.repository }}.git"

          # Push to main
          git push origin main

      # 10) Notify completion
      - name: Notify completion
        run: echo "Exported KiCad images and pushed changes to the repository."
